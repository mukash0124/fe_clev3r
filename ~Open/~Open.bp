pr_advgyro_gyro_last = 0
pr_advgyro_gyro_angle = 0
pr_colorrgb_s_red_k = 0
pr_colorrgb_s_red_b = 0
pr_colorrgb_s_blue_k = 0
pr_colorrgb_s_blue_b = 0
pr_colorrgb_s_green_k = 0
pr_colorrgb_s_green_b = 0
pr_odometry_coefficient = 0
pr_odometry_x = 0
pr_odometry_y = 0
pr_odometry_reset = 0
pr_odometry_resxodom = 0
pr_odometry_resyodom = 0
pr_advencoder_lasta = 0
pr_advencoder_lastb = 0
pr_advencoder_lastc = 0
pr_advencoder_lastd = 0
pr_steercontrol_kp = 0
pr_steercontrol_ki = 0
pr_steercontrol_kd = 0
pr_steercontrol_limit = 0
pr_steercontrol_steer_center = 0
pr_steercontrol_steer_target = 0
pr_steercontrol_error_old = 0
pr_steercontrol_error_sum = 0
lv_port_7 = 0
lv_result_7 = 0
lv_port_8 = 0
lv_red_min_11 = 0
lv_red_max_11 = 0
lv_blue_min_11 = 0
lv_blue_max_11 = 0
lv_green_min_11 = 0
lv_green_max_11 = 0
lv_distance_13 = 0
lv_distance_14 = 0
lv_coef_15 = 0
lv_xodom_16 = 0
lv_yodom_16 = 0
lv_angle_9 = 0
lv_in_kp_21 = 0
lv_in_ki_21 = 0
lv_in_kd_21 = 0
lv_in_limit_21 = 0
lv_in_steer_center_21 = 0
lv_x_3 = 0
lv_y_3 = 0
lv_iswhite_1 = 0
lv_isorange_1 = 0
lv_turnangle_5 = 0
lv_angle_10 = 0
lv_red_12 = 0
lv_blue_12 = 0
lv_green_12 = 0
lv_encoder_22 = 0
lv_power_22 = 0
lv_change_20 = 0
lv_angle_17 = 0
lv_encchange_17 = 0
lv_xodom_18 = 0
lv_yodom_18 = 0
lv_y_25 = 0
lv_x_25 = 0
lv_n_25 = 0
lv_angle_26 = 0
lv_wrapped_angle_26 = 0
lv_angle_2 = 0
lv_aim_2 = 0
lv_target_24 = 0
lv_turnangle_4 = 0
lv_x_23 = 0
lv_min_23 = 0
lv_max_23 = 0
lv_n_23 = 0
gv_result = 0
gv_fdistance = 0
gv_sdistance = 0
gv_iswhite = 0
gv_isorange = 0
gv_gyroangle = 0
gv_r = 0
gv_g = 0
gv_b = 0
gv_powerc = 0
gv_encchangea = 0
gv_x = 0
gv_y = 0
lv_heading_3 = 0
lv_error_3 = 0
lv_headingdifference_3 = 0
lv_iswhite_6 = 0
lv_isorange_6 = 0
lv_angle_10 = 0
lv_target_22 = 0
gv_col = 0
gv_rmin = 0
gv_rmax = 0
gv_gmin = 0
gv_gmax = 0
gv_bmin = 0
gv_bmax = 0
gv_anglekp = 0
gv_anglekd = 0
gv_angleold = 0
gv_clockwise = 0
gv_turncounter = 0
gv_turnangle = 0
gv_uartready = 0
gv_steeringready = 0
gv_odometryready = 0
gv_ypos = 0
Speaker.Tone ( 50 , 300 , 100 )
Sensor.SetMode ( 1 , 0 )
Sensor.SetMode ( 2 , 0 )
Sensor.SetMode ( 3 , 4 )
Sensor.SetMode ( 4 , 0 )
lv_port_7 = 2
m_advgyro_checkreset_2 ()
gv_result = lv_result_7
While gv_result = 0
Program.Delay ( 1000 )
lv_port_8 = 2
m_advgyro_hardreset_1 ()
lv_port_7 = 2
m_advgyro_checkreset_2 ()
gv_result = lv_result_7
EndWhile
gv_col = EV3File.OpenRead ( "col" )
gv_rmin = EV3File.ConvertToNumber ( EV3File.ReadLine ( gv_col ) )
gv_rmax = EV3File.ConvertToNumber ( EV3File.ReadLine ( gv_col ) )
gv_gmin = EV3File.ConvertToNumber ( EV3File.ReadLine ( gv_col ) )
gv_gmax = EV3File.ConvertToNumber ( EV3File.ReadLine ( gv_col ) )
gv_bmin = EV3File.ConvertToNumber ( EV3File.ReadLine ( gv_col ) )
gv_bmax = EV3File.ConvertToNumber ( EV3File.ReadLine ( gv_col ) )
lv_red_min_11 = gv_rmin
lv_red_max_11 = gv_rmax
lv_blue_min_11 = gv_gmin
lv_blue_max_11 = gv_gmax
lv_green_min_11 = gv_bmin
lv_green_max_11 = gv_bmax
m_colorrgb_config_6 ()
m_advultrasonic_readport1_1 ()
gv_fdistance = lv_distance_13
m_advultrasonic_readport4_1 ()
gv_sdistance = lv_distance_14
lv_coef_15 = 15.53
m_odometry_config_1 ()
lv_xodom_16 = 0
lv_yodom_16 = 0
m_odometry_reset_2 ()
lv_angle_9 = 0
m_advgyro_resetport2_1 ()
m_advencoder_config_0 ()
lv_in_kp_21 = 1.5
lv_in_ki_21 = 0.1
lv_in_kd_21 = 3
lv_in_limit_21 = 45
lv_in_steer_center_21 = 54
m_steercontrol_config_5 ()
MotorC.StartPower ( - 80 )
Program.Delay ( 2000 )
MotorC.ResetCount ()
gv_anglekp = 1.2
gv_anglekd = 3
gv_angleold = 0
gv_clockwise = 0
gv_turncounter = 0
gv_turnangle = 90.9
gv_uartready = 0
gv_steeringready = 0
gv_odometryready = 0
gv_ypos = 0
Thread.Run = f_uart_0
Thread.Run = f_odometry_0
Thread.Run = f_steering_0
Thread.Run = f_display_0
While gv_uartready = 0 Or gv_steeringready = 0 Or gv_odometryready = 0
EndWhile
f_start_0 ()
MotorAB.SetPower ( 100 )
While gv_turncounter < 12
gv_iswhite = 1
gv_isorange = 0
While Time.Get1 () < 300 Or gv_iswhite = 1 Or gv_isorange <> gv_clockwise
lv_x_3 = gv_x + 50
lv_y_3 = gv_ypos
f_steertopoint_2 ()
f_colorcheck_2 ()
gv_iswhite = lv_iswhite_1
gv_isorange = lv_isorange_1
EndWhile
Speaker.Tone ( 50 , 3000 , 100 )
lv_turnangle_5 = gv_turnangle
f_reset_1 ()
EndWhile
While gv_x < 0 Or Time.Get1 () < 200
lv_x_3 = gv_x + 50
lv_y_3 = gv_ypos
f_steertopoint_2 ()
EndWhile
MotorAB.OffAndBrake ()
Speaker.Tone ( 100 , 3000 , 300 )
Speaker.Wait ()
Speaker.Tone ( 100 , 3000 , 300 )
Speaker.Wait ()
Speaker.Tone ( 100 , 3000 , 300 )
Speaker.Wait ()
Sub f_uart_0
gv_uartready = 1
While 1 = 1
m_advgyro_writeport2_1 ()
gv_gyroangle = lv_angle_10
m_colorrgb_readport3_3 ()
gv_r = lv_red_12
gv_g = lv_blue_12
gv_b = lv_green_12
EndWhile
EndSub
Sub f_steering_0
gv_steeringready = 1
While 1 = 1
lv_encoder_22 = MotorC.GetTacho ()
m_steercontrol_core_2 ()
gv_powerc = lv_power_22
MotorC.StartPower ( gv_powerc )
EndWhile
EndSub
Sub f_odometry_0
gv_odometryready = 1
While 1 = 1
m_advencoder_getchangea_1 ()
gv_encchangea = lv_change_20
lv_angle_17 = gv_gyroangle
lv_encchange_17 = gv_encchangea
m_odometry_write_2 ()
m_odometry_read_2 ()
gv_x = lv_xodom_18
gv_y = lv_yodom_18
EndWhile
EndSub
Sub f_display_0
While 1 = 1
LCD.Text ( 1 , 10 , 10 , 2 , gv_x )
LCD.Text ( 1 , 10 , 40 , 2 , gv_y )
Program.Delay ( 1 )
LCD.Clear ()
EndWhile
EndSub
Sub f_colorcheck_2
If gv_b < 55 Then
lv_iswhite_1 = 0
Else
lv_iswhite_1 = 1
EndIf
If gv_r > 80 Then
lv_isorange_1 = 1
Else
lv_isorange_1 = 0
EndIf
EndSub
Sub f_anglecore_2
lv_aim_2 = gv_anglekp * lv_angle_2 + gv_anglekd * ( lv_angle_2 - gv_angleold )
gv_angleold = lv_angle_2
EndSub
Sub f_steertopoint_2
lv_deltax_3 = lv_x_3 - gv_x
lv_deltay_3 = lv_y_3 - gv_y
lv_y_25 = lv_deltay_3
lv_x_25 = lv_deltax_3
m_tool_atan2_3 ()
lv_heading_3 = lv_n_25
lv_angle_26 = gv_gyroangle - lv_heading_3
m_toolbox_anglewrap_2 ()
lv_error_3 = lv_wrapped_angle_26
lv_angle_2 = lv_error_3
f_anglecore_2 ()
lv_headingdifference_3 = lv_aim_2
lv_target_24 = lv_headingdifference_3
m_steercontrol_settarget_1 ()
EndSub
Sub f_startreset_1
If gv_x > 50 Then
lv_resetx_4 = gv_x - 15
Else
lv_resetx_4 = gv_x + 35
EndIf
If gv_clockwise = 1 Then
gv_ypos = - 20
If gv_fdistance < 20 Then
lv_resety_4 = gv_y - 30
ElseIf gv_fdistance < 50 Then
lv_resety_4 = gv_y
Else
lv_resety_4 = gv_y + 30
EndIf
Else
gv_ypos = 20
If gv_sdistance < 20 Then
lv_resety_4 = gv_y + 30
ElseIf gv_sdistance < 50 Then
lv_resety_4 = gv_y
Else
lv_resety_4 = gv_y - 30
EndIf
EndIf
If gv_clockwise = 0 Then
lv_angle_9 = gv_gyroangle + lv_turnangle_4
m_advgyro_resetport2_1 ()
lv__resety_4 = lv_resetx_4 - 100
lv__resetx_4 = - 100 - lv_resety_4
Else
lv_angle_9 = gv_gyroangle - lv_turnangle_4
m_advgyro_resetport2_1 ()
lv__resety_4 = 100 - lv_resetx_4
lv__resetx_4 = lv_resety_4 - 100
EndIf
m_advgyro_writeport2_1 ()
gv_gyroangle = lv_angle_10
lv_xodom_16 = lv__resetx_4
lv_yodom_16 = lv__resety_4
m_odometry_reset_2 ()
lv_angle_17 = 0
lv_encchange_17 = 0
m_odometry_write_2 ()
gv_turncounter = gv_turncounter + 1
EndSub
Sub f_reset_1
If gv_clockwise = 0 Then
lv_angle_9 = gv_gyroangle + lv_turnangle_5
m_advgyro_resetport2_1 ()
lv_resety_5 = gv_x - 100
lv_resetx_5 = - 100 - gv_y
Else
lv_angle_9 = gv_gyroangle - lv_turnangle_5
m_advgyro_resetport2_1 ()
lv_resety_5 = 100 - gv_x
lv_resetx_5 = gv_y - 100
EndIf
m_advgyro_writeport2_1 ()
gv_gyroangle = lv_angle_10
lv_xodom_16 = lv_resetx_5
lv_yodom_16 = lv_resety_5
m_odometry_reset_2 ()
lv_angle_17 = 0
lv_encchange_17 = 0
m_odometry_write_2 ()
gv_turncounter = gv_turncounter + 1
Time.Reset1 ()
EndSub
Sub f_start_0
lv_iswhite_6 = 1
lv_isorange_6 = 0
MotorAB.StartPower ( 60 )
While lv_iswhite_6 = 1
lv_x_3 = gv_x + 50
lv_y_3 = 0
f_steertopoint_2 ()
f_colorcheck_2 ()
lv_iswhite_6 = lv_iswhite_1
lv_isorange_6 = lv_isorange_1
EndWhile
gv_clockwise = lv_isorange_6
Speaker.Tone ( 50 , 3000 , 100 )
lv_turnangle_4 = gv_turnangle
f_startreset_1 ()
Program.Delay ( 100 )
If gv_clockwise = 0 Then
While gv_y < 0
lv_x_3 = gv_x
lv_y_3 = gv_y + 25
f_steertopoint_2 ()
EndWhile
Else
While gv_y > 0
lv_x_3 = gv_x
lv_y_3 = gv_y - 25
f_steertopoint_2 ()
EndWhile
EndIf
EndSub
Sub m_advgyro_checkreset_2
Sensor.SetMode ( lv_port_7 , 0 )
Sensor.ReadRawValue ( lv_port_7 , 0 )
Program.Delay ( 2000 )
If Sensor.ReadRawValue ( lv_port_7 , 0 ) <> 0 Then
lv_result_7 = 0
Speaker.Note ( 100 , "C5" , 100 )
Speaker.Wait ()
Speaker.Note ( 100 , "C5" , 100 )
Speaker.Wait ()
Speaker.Note ( 100 , "C5" , 100 )
Speaker.Wait ()
Else
lv_result_7 = 1
EndIf
EndSub
Sub m_advgyro_hardreset_1
Sensor.SetMode ( lv_port_8 , 4 )
Program.Delay ( 550 )
Sensor.SetMode ( lv_port_8 , 0 )
EndSub
Sub m_advgyro_resetport2_1
lv_value_9 = Sensor2.Raw1 ()
pr_advgyro_gyro_last = lv_value_9 - lv_angle_9
EndSub
Sub m_advgyro_writeport2_1
lv_value_10 = Sensor2.Raw1 ()
lv_unwrapped_angle_10 = lv_value_10 - pr_advgyro_gyro_last
lv_angle_26 = lv_unwrapped_angle_10
m_toolbox_anglewrap_2 ()
lv_angle_10 = lv_wrapped_angle_26
pr_advgyro_gyro_angle = lv_angle_10
EndSub
Sub m_colorrgb_config_6
pr_colorrgb_s_red_k = 100 / ( lv_red_max_11 - lv_red_min_11 )
pr_colorrgb_s_red_b = lv_red_min_11 * ( - 1 ) * pr_colorrgb_s_red_k
pr_colorrgb_s_blue_k = 100 / ( lv_blue_max_11 - lv_blue_min_11 )
pr_colorrgb_s_blue_b = lv_blue_min_11 * ( - 1 ) * pr_colorrgb_s_blue_k
pr_colorrgb_s_green_k = 100 / ( lv_green_max_11 - lv_green_min_11 )
pr_colorrgb_s_green_b = lv_green_min_11 * ( - 1 ) * pr_colorrgb_s_green_k
EndSub
Sub m_colorrgb_readport3_3
lv_r_12 = 0
lv_g_12 = 0
lv_b_12 = 0
Sensor3.Raw3 ( lv_r_12 , lv_g_12 , lv_b_12 )
lv_red_12 = lv_r_12 * pr_colorrgb_s_red_k + pr_colorrgb_s_red_b
lv_blue_12 = lv_b_12 * pr_colorrgb_s_blue_k + pr_colorrgb_s_blue_b
lv_green_12 = lv_g_12 * pr_colorrgb_s_green_k + pr_colorrgb_s_green_b
EndSub
Sub m_advultrasonic_readport1_1
lv_distance_13 = Sensor1.Raw1 () / 10
EndSub
Sub m_advultrasonic_readport4_1
lv_distance_14 = Sensor4.Raw1 () / 10
EndSub
Sub m_odometry_config_1
pr_odometry_coefficient = lv_coef_15
pr_odometry_x = 0
pr_odometry_y = 0
pr_odometry_reset = 0
pr_odometry_resxodom = 0
pr_odometry_resyodom = 0
EndSub
Sub m_odometry_reset_2
pr_odometry_resxodom = lv_xodom_16
pr_odometry_resyodom = lv_yodom_16
pr_odometry_reset = 1
EndSub
Sub m_odometry_write_2
If pr_odometry_reset = 1 Then
pr_odometry_x = pr_odometry_resxodom
pr_odometry_y = pr_odometry_resyodom
pr_odometry_reset = 0
Else
pr_odometry_x = pr_odometry_x + ( lv_encchange_17 / pr_odometry_coefficient ) * Math.Cos ( Math.GetRadians ( lv_angle_17 ) )
pr_odometry_y = pr_odometry_y + ( lv_encchange_17 / pr_odometry_coefficient ) * Math.Sin ( Math.GetRadians ( lv_angle_17 ) )
EndIf
EndSub
Sub m_odometry_read_2
lv_xodom_18 = pr_odometry_x
lv_yodom_18 = pr_odometry_y
EndSub
Sub m_advencoder_config_0
pr_advencoder_lasta = 0
pr_advencoder_lastb = 0
pr_advencoder_lastc = 0
pr_advencoder_lastd = 0
MotorA.ResetCount ()
MotorB.ResetCount ()
MotorC.ResetCount ()
MotorD.ResetCount ()
EndSub
Sub m_advencoder_getchangea_1
lv_enc_20 = MotorA.GetTacho ()
lv_change_20 = lv_enc_20 - pr_advencoder_lasta
pr_advencoder_lasta = lv_enc_20
EndSub
Sub m_steercontrol_config_5
pr_steercontrol_kp = lv_in_kp_21
pr_steercontrol_ki = lv_in_ki_21
pr_steercontrol_kd = lv_in_kd_21
pr_steercontrol_limit = lv_in_limit_21
pr_steercontrol_steer_center = lv_in_steer_center_21
pr_steercontrol_steer_target = 0
pr_steercontrol_error_old = 0
pr_steercontrol_error_sum = 0
EndSub
Sub m_steercontrol_core_2
lv_x_23 = pr_steercontrol_steer_target
lv_min_23 = 0 - pr_steercontrol_limit
lv_max_23 = pr_steercontrol_limit
m_tool_constrain_4 ()
lv_target_22 = lv_n_23
lv_error_22 = pr_steercontrol_steer_center + lv_target_22 - lv_encoder_22
lv_pd_22 = pr_steercontrol_kp * lv_error_22 + pr_steercontrol_kd * ( lv_error_22 - pr_steercontrol_error_old )
lv_power_22 = pr_steercontrol_ki * pr_steercontrol_error_sum + lv_pd_22
pr_steercontrol_error_sum = pr_steercontrol_error_sum / 1.1 + lv_error_22
pr_steercontrol_error_old = lv_error_22
EndSub
Sub m_tool_constrain_4
If lv_x_23 < lv_min_23 Then
lv_n_23 = lv_min_23
ElseIf lv_x_23 > lv_max_23 Then
lv_n_23 = lv_max_23
Else
lv_n_23 = lv_x_23
EndIf
EndSub
Sub m_steercontrol_settarget_1
pr_steercontrol_steer_target = lv_target_24
EndSub
Sub m_tool_atan2_3
If lv_x_25 > 0 Then
lv_n_25 = Math.GetDegrees ( Math.ArcTan ( lv_y_25 / lv_x_25 ) )
ElseIf lv_x_25 < 0 Then
If lv_y_25 >= 0 Then
lv_n_25 = Math.GetDegrees ( Math.ArcTan ( lv_y_25 / lv_x_25 ) ) + 180
Else
lv_n_25 = Math.GetDegrees ( Math.ArcTan ( lv_y_25 / lv_x_25 ) ) - 180
EndIf
ElseIf lv_x_25 = 0 Then
If lv_y_25 = 0 Then
lv_n_25 = 0
ElseIf lv_y_25 > 0 Then
lv_n_25 = 90
ElseIf lv_y_25 < 0 Then
lv_n_25 = - 90
EndIf
EndIf
EndSub
Sub m_toolbox_anglewrap_2
If lv_angle_26 < 0 Then
lv_a_26 = - 180
Else
lv_a_26 = 180
EndIf
lv_wrapped_angle_26 = Math.Remainder ( ( lv_angle_26 + lv_a_26 ) , 360 ) - lv_a_26
EndSub
