DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VGV_RMIN
DATAF VGV_GMIN
DATAF VGV_BMIN
DATAF VGV_RMAX
DATAF VGV_GMAX
DATAF VGV_BMAX
DATAF VGV_COL
DATAF VGV_R
DATAF VGV_G
DATAF VGV_B

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VGV_RMIN
    MOVEF_F 0.0 VGV_GMIN
    MOVEF_F 0.0 VGV_BMIN
    MOVEF_F 0.0 VGV_RMAX
    MOVEF_F 0.0 VGV_GMAX
    MOVEF_F 0.0 VGV_BMAX
    MOVEF_F 0.0 VGV_COL
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_B
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VGV_RMIN
    MOVEF_F 0.0 VGV_GMIN
    MOVEF_F 0.0 VGV_BMIN
    MOVEF_F 0.0 VGV_RMAX
    MOVEF_F 0.0 VGV_GMAX
    MOVEF_F 0.0 VGV_BMAX
    MOVEF_F 0.0 VGV_COL
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_B
    DATA8 layer0
	DATA8 no0
	DATA8 mode80
	
	MOVEF_8 3.0 no0
	SUB8 no0 1 no0
	DIV8 no0 4 layer0
	MATH MOD8 no0 4 no0

	MOVEF_8 4.0 mode80
	
	INPUT_DEVICE READY_RAW layer0 no0 0 mode80 0
    MOVEF_8 50.0 setPowerC
	OUTPUT_POWER 0 4 setPowerC
	OUTPUT_START 0 4
    DATA32 milliseconds2
	MOVEF_32 2000.0 milliseconds2
	DATA32 timer2
	TIMER_WAIT milliseconds2 timer2
	TIMER_READY timer2
    CALL MOTOR.SCHEDULE 'C' -50.0 0.0 54.0 0.0 'True' 

	DATA8 layer3
	DATA8 nos3
	DATA8 busy3
	CALL MOTORDECODEPORTSDESCRIPTOR 'C' layer3 nos3
	JR_EQ8 0 nos3 motornotbusy3
  motorwaiting3:
	OUTPUT_TEST layer3 nos3 busy3
	JR_EQ8 busy3 0 motornotbusy3
	SLEEP
	JR motorwaiting3
  motornotbusy3:
    MOVEF_8 50.0 setPowerA
	OUTPUT_POWER 0 3 setPowerA
	OUTPUT_START 0 3
    CALL LCD.CLEAR
    MOVEF_F 500.0 VGV_RMIN
    MOVEF_F 500.0 VGV_GMIN
    MOVEF_F 500.0 VGV_BMIN
    MOVEF_F -500.0 VGV_RMAX
    MOVEF_F -500.0 VGV_GMAX
    MOVEF_F -500.0 VGV_BMAX
    CALL EV3FILE.OPENWRITE 'col' VGV_COL
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_B
  while7:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    JR_GTEQF F.0 400.0 endwhile7
  whilebody7:
    INPUT_READEXT 0 2 0 -1 18 3 s3out1 s3out2 s3out3
	MOVE32_F s3out1 VGV_R
	MOVE32_F s3out2 VGV_G
	MOVE32_F s3out3 VGV_B
    DATA8 flag10
	CP_LTF VGV_RMIN VGV_R flag10
	SELECTF flag10 VGV_RMIN VGV_R VGV_RMIN
    DATA8 flag11
	CP_GTF VGV_RMAX VGV_R flag11
	SELECTF flag11 VGV_RMAX VGV_R VGV_RMAX
    DATA8 flag12
	CP_LTF VGV_GMIN VGV_G flag12
	SELECTF flag12 VGV_GMIN VGV_G VGV_GMIN
    DATA8 flag13
	CP_GTF VGV_GMAX VGV_G flag13
	SELECTF flag13 VGV_GMAX VGV_G VGV_GMAX
    DATA8 flag14
	CP_LTF VGV_BMIN VGV_B flag14
	SELECTF flag14 VGV_BMIN VGV_B VGV_BMIN
    DATA8 flag15
	CP_GTF VGV_BMAX VGV_B flag15
	SELECTF flag15 VGV_BMAX VGV_B VGV_BMAX
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    JR_LTF F.0 400.0 whilebody7
  endwhile7:
    STRINGS VALUE_FORMATTED VGV_RMIN '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_COL S.0
    STRINGS VALUE_FORMATTED VGV_RMAX '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_COL S.0
    STRINGS VALUE_FORMATTED VGV_BMIN '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_COL S.0
    STRINGS VALUE_FORMATTED VGV_BMAX '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_COL S.0
    STRINGS VALUE_FORMATTED VGV_GMIN '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_COL S.0
    STRINGS VALUE_FORMATTED VGV_GMAX '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_COL S.0
ENDTHREAD:
    RETURN
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
