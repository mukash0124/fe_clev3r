import "Mods\Odometry"
import "Mods\AdvEncoder"
import "Mods\AdvGyro"
import "Mods\ColorRGB"
import "Mods\SteerControl"
import "Mods\AdvPixy"
import "Mods\Tool"
import "Mods\ToolBox"

Sensor.SetMode(2, 0)
Sensor.SetMode(3, 4)

AdvGyro.CheckReset(2, result)
While result = 0
  AdvGyro.HardReset(2)
  AdvGyro.CheckReset(2, result)
EndWhile

col = EV3File.OpenRead("col")
Rmin = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Rmax = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Gmin = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Gmax = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Bmin = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Bmax = EV3File.ConvertToNumber(EV3File.ReadLine(col))
ColorRGB.Config(Rmin, Rmax, Gmin, Gmax, Bmin, Bmax)

Odometry.Config(15.43)
AdvGyro.ResetPort2(0)
AdvEncoder.Config()
SteerControl.Config(1.5, 0.1, 3, 48, 54)
MotorC.StartPower(-80)
Program.Delay(2000)
MotorC.ResetCount()

angleKp = 2
angleKd = 3
angleOld = 0
clockWise = 0
turnCounter = 0
turnAngle = 90.3
fakeWheelBase = 14.5
UArtReady = 0
SteeringReady = 0
OdometryReady = 0
I2CReady = 0
anglePointX = 0
anglePointY = 0
powerCenter = 50
powerDetour = 30

Sub UArt
  UArtReady = 1
  While 1=1
    AdvGyro.WritePort2(gyroAngle)
    ColorRGB.ReadPort3(r, g, b)
  EndWhile
EndSub

Sub I2C
  I2CReady = 1
  While 1=1
    AdvPixy.getLargest(1, pixyX, pixyY, signature)
  EndWhile
EndSub

Sub Steering
  SteeringReady = 1
  While 1=1
    SteerControl.Core(MotorC.GetTacho(), powerC)
    MotorC.StartPower(powerC)
  EndWhile
EndSub

Sub Odometry
  OdometryReady = 1
  While 1=1
    AdvEncoder.getChangeA(encChangeA)
    Odometry.Write(gyroAngle, encChangeA)
    Odometry.Read(X, Y)
  EndWhile
EndSub

Function ColorCheck(out number isWhite, out number isOrange)
  If @b < 25 Then
    isWhite = 0
  Else
    isWhite = 1
  EndIf
  If @r > 50 Then
    isOrange = 1
  Else
    isOrange = 0
  EndIf
EndFunction

Function AngleCore(in number angle, out number aim)
  aim = @angleKp * angle + @angleKd * (angle - @angleOld)
  @angleOld = angle
EndFunction

Function SteerToPoint(in number x, in number y)
  deltaX = x - @X
  deltaY = y - @Y
  Tool.atan2(deltaY, deltaX, heading)
  ToolBox.AngleWrap(@gyroAngle - heading, error)
  AngleCore(error, headingDifference)
  SteerControl.SetTarget(headingDifference)
EndFunction

Function DriveToPointUntilLine(in number x, in number y)
  isWhite = 1
  isOrange = @clockWise
  While isWhite = 1 Or isOrange = @clockWise
    SteerToPoint(x, y)
    ColorCheck(isWhite, isOrange)
  EndWhile
  Speaker.Tone(100, 300, 100)
EndFunction

Function DriveToPoint(in number x, in number y)
  While @X <= x - 5 Or @Y <= y - 5 Or @Y >= y + 5
    SteerToPoint(x, y)
  EndWhile
  Speaker.Tone(100, 300, 100)
EndFunction

Function Reset(in number turnAngle)
  b1 = 80.5
  b2 = 136
  x1 = @X + Math.Cos(Math.GetRadians(@gyroAngle)) * @fakeWheelBase
  y1 = @Y + Math.Sin(Math.GetRadians(@gyroAngle)) * @fakeWheelBase
  isWhite = 1
  isOrange = @clockWise
  While isWhite = 1 Or isOrange = @clockWise
    If @signature = 0 Then
      SteerToPoint(@anglePointX, @anglePointY)
    Else
      DetourObstacle()
    EndIf
    ColorCheck(isWhite, isOrange)
  EndWhile
  x2 = @X + Math.Cos(Math.GetRadians(@gyroAngle)) * @fakeWheelBase
  y2 = @Y + Math.Sin(Math.GetRadians(@gyroAngle)) * @fakeWheelBase
  If @clockWise = 0 Then
    AdvGyro.ResetPort2(@gyroAngle + turnAngle)
    deltaX = y1 - y2
    deltaY = x1 - x2
    resetX = (deltaY + b1 - b2 - 0.577 * deltaX) / 1.16
    resetY = -1.73 * resetX - b2
  Else
    AdvGyro.ResetPort2(@gyroAngle - turnAngle)
    deltaX = y2 - y1
    deltaY = x1 - x2
    resetX = (deltaY + b1 - b2 - 0.577 * deltaX) / 1.16
    resetY = 1.73 * resetX + b2
  EndIf
  AdvGyro.WritePort2(@gyroAngle)
  resetX = resetX - Math.Cos(Math.GetRadians(@gyroAngle)) * @fakeWheelBase
  resetY = resetY - Math.Sin(Math.GetRadians(@gyroAngle)) * @fakeWheelBase
  Odometry.Reset(resetX, resetY)
  @turnCounter++
EndFunction

Function DriveToPoints()
  For i = 0 To 1
    DriveToPoint(Row.Read(@x_dot, i), Row.Read(@y_dot, i))
  EndFor
EndFunction

Function DetourObstacle()
  If @signature = 2 Then
    Speaker.Tone(50, 4000, 50)
    desiredX = -0.0026 * @pixyY * @pixyY + 0.9926 * @pixyY + 26.461
  Else
    Speaker.Tone(50, 500, 50)
    desiredX = 0.0026 * @pixyY * @pixyY - 0.9926 * @pixyY - 26.461
  EndIf
  SteerControl.SetTarget((desiredX - @pixyX) * 0.5)
EndFunction

Sub Display
  While 1=1 
    LCD.Text(1, 10, 10, 2, X)
    LCD.Text(1, 10, 40, 2, Y)
    Program.Delay(1)
    LCD.Clear()
  EndWhile
EndSub

Thread.Run = UArt
Thread.Run = I2C
Thread.Run = Odometry
Thread.Run = Steering

Function Start()
  isWhite = 1
  isOrange = 0
  MotorAB.Start()
  While isWhite = 1 Or Time.Get1() < 500
    If @signature = 0 Or @Y > 25 Or @Y < -25 Or @pixyY < 60 Then
      MotorAB.SetPower(@powerCenter)
      SteerControl.SetTarget(@gyroAngle)
    Else
      MotorAB.SetPower(@powerDetour)
      DetourObstacle()
    EndIf
    ColorCheck(isWhite, isOrange)
  EndWhile
  @clockwise = isOrange
  @anglePointX = 100
  If isOrange = 1 Then
    @anglePointY = 50
  Else
    @anglePointY = -50
  EndIf
  Speaker.Tone(50, 3000, 100)
  Reset(@turnAngle)
  Time.Reset1()
EndFunction

While UArtReady = 0 Or SteeringReady = 0 Or OdometryReady = 0 Or I2CReady = 0
  
EndWhile

Start()
While turnCounter < 13
  isWhite = 1
  isOrange = 0
  While isWhite = 1 Or Time.Get1() < 500
    If @signature = 0 Or @Y > 25 Or @Y < -25 Or @pixyY < 60 Then
      MotorAB.SetPower(powerCenter)
      SteerToPoint(@X + 25, 0)
    Else
      MotorAB.SetPower(powerDetour)
      DetourObstacle()
    EndIf
    ColorCheck(isWhite, isOrange)
  EndWhile
  Speaker.Tone(50, 3000, 100)
  Reset(turnAngle)
  Time.Reset1()
EndWhile