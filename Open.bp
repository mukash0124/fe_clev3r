'Importing our custom libraries
import "Mods\Odometry"
import "Mods\AdvEncoder"
import "Mods\AdvGyro"
import "Mods\ColorRGB"
import "Mods\SteerControl"
import "Mods\AdvUltrasonic"

'Setting up proper mods for sensors
Sensor.SetMode(1, 0)
Sensor.SetMode(2, 0)
Sensor.SetMode(3, 4)
Sensor.SetMode(4, 0)

'Hard reset of gyro sensor
AdvGyro.CheckReset(2, result)
While result = 0
  Program.Delay(1000)
  AdvGyro.HardReset(2)
  AdvGyro.CheckReset(2, result)
EndWhile

'Reading configuration of color sensor
col = EV3File.OpenRead("col")
Rmin = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Rmax = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Gmin = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Gmax = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Bmin = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Bmax = EV3File.ConvertToNumber(EV3File.ReadLine(col))
ColorRGB.Config(Rmin, Rmax, Gmin, Gmax, Bmin, Bmax)

'Measuring distance to the borders using ultrasonic sensor
AdvUltrasonic.ReadPort1(fDistance)
AdvUltrasonic.ReadPort4(sDistance)

'Configuration of our custom libraries
Odometry.Config(15.53)
Odometry.Reset(0, 0)
AdvGyro.ResetPort2(0)
AdvEncoder.Config()
SteerControl.Config(1.5, 0.1, 3, 45, 54)

'Setting up steering mechanism
MotorC.StartPower(-80)
Program.Delay(2000)
MotorC.ResetCount()

'Setting up basic values of our variables
angleKp = 1.2
angleKd = 3
angleOld = 0
clockWise = 0
turnCounter = 0
turnAngle = 90.9
UArtReady = 0
SteeringReady = 0
OdometryReady = 0
yPos = 0

'Subprogram that continously writes down values of gyro and color sensors into variables
Sub UArt
  UArtReady = 1
  While 1=1
    AdvGyro.WritePort2(gyroAngle)
    ColorRGB.ReadPort3(r, g, b)
  EndWhile
EndSub

'Subprogram that continously puts steering wheels in the right position
Sub Steering
  SteeringReady = 1
  While 1=1
    SteerControl.Core(MotorC.GetTacho(), powerC)
    MotorC.StartPower(powerC)
  EndWhile
EndSub

'Subprogram that continously writes down position of the robot using odometry
Sub Odometry
  OdometryReady = 1
  While 1=1
    AdvEncoder.getChangeA(encChangeA)
    Odometry.Write(gyroAngle, encChangeA)
    Odometry.Read(X, Y)
  EndWhile
EndSub

'Function to check colours of the lines
Function ColorCheck(out number isWhite, out number isOrange)
  If @b < 55 Then
    isWhite = 0
  Else
    isWhite = 1
  EndIf
  If @r > 80 Then
    isOrange = 1
  Else
    isOrange = 0
  EndIf
EndFunction

'Function that implements basic PD controller for stabilizing steering angles
Function AngleCore(in number angle, out number aim)
  aim = @angleKp * angle + @angleKd * (angle - @angleOld)
  @angleOld = angle
EndFunction

'Function that puts steering wheels into correct position according to some point on the game field
Function SteerToPoint(in number x, in number y)
  deltaX = x - @X
  deltaY = y - @Y
  Tool.atan2(deltaY, deltaX, heading)
  ToolBox.AngleWrap(@gyroAngle - heading, error)
  AngleCore(error, headingDifference)
  SteerControl.SetTarget(headingDifference)
EndFunction

'Function that resets position and angle of the robot on the start
Function StartReset(in number turnAngle)
  If @X > 50 Then
    resetX = @X - 15
  Else 
    resetX = @X + 35
  EndIf
  If @clockWise = 1 Then
    @yPos = -20
    If @fDistance < 20 Then
      resetY = @Y - 30
    ElseIf @fDistance < 50 Then
      resetY = @Y
    Else
      resetY = @Y + 30
    EndIf
  Else
    @yPos = 20
    If @sDistance < 20 Then
      resetY = @Y + 30
    ElseIf @sDistance < 50 Then
      resetY = @Y
    Else
      resetY = @Y - 30
    EndIf
  EndIf
  If @clockWise = 0 Then
    AdvGyro.ResetPort2(@gyroAngle + turnAngle)
    _resetY = resetX - 100
    _resetX = -100 - resetY
  Else
    AdvGyro.ResetPort2(@gyroAngle - turnAngle)
    _resetY = 100 - resetX
    _resetX = resetY - 100
  EndIf
  AdvGyro.WritePort2(@gyroAngle)
  Odometry.Reset(_resetX, _resetY)
  Odometry.Write(0, 0)
  @turnCounter++
EndFunction

'Function that resets position and angle of the robot on the turns
Function Reset(in number turnAngle)
  If @clockWise = 0 Then
    AdvGyro.ResetPort2(@gyroAngle + turnAngle)
    resetY = @X - 100
    resetX = -100 - @Y
  Else
    AdvGyro.ResetPort2(@gyroAngle - turnAngle)
    resetY = 100 - @X
    resetX = @Y - 100
  EndIf
  AdvGyro.WritePort2(@gyroAngle)
  Odometry.Reset(resetX, resetY)
  Odometry.Write(0, 0)
  @turnCounter++
  Time.Reset1()
EndFunction

'Our starting function, implements logic before the first line
Function Start()
  isWhite = 1
  isOrange = 0
  MotorAB.StartPower(60)
  While isWhite = 1
    SteerToPoint(@X + 50, 0)
    ColorCheck(isWhite, isOrange)
  EndWhile
  @clockwise = isOrange
  Speaker.Tone(50, 3000, 100)
  StartReset(@turnAngle)
  Program.Delay(100)
  If @clockWise = 0 Then
    While @Y < 0
      SteerToPoint(@X, @Y + 25)
    EndWhile
  Else
    While @Y > 0
      SteerToPoint(@X, @Y - 25)
    EndWhile
  EndIf
EndFunction

'Running parallel subprograms that need to be ran simultaneously with the main program
Thread.Run = UArt
Thread.Run = Odometry
Thread.Run = Steering

'Checking that all subprograms are already initialized
While UArtReady = 0 Or SteeringReady = 0 Or OdometryReady = 0
  
EndWhile

'Waiting for the start button to be pressed
Buttons.Wait()
Speaker.Tone(50, 300, 200)
Program.Delay(500)

'Calling the start function
Start()
MotorAB.SetPower(100)

'Main loop that performs driving between lines and line checks 12 times
While turnCounter < 12
  isWhite = 1
  isOrange = 0
  While Time.Get1() < 300 Or isWhite = 1 Or isOrange <> clockWise
    SteerToPoint(@X + 50, yPos)
    ColorCheck(isWhite, isOrange)
  EndWhile
  Speaker.Tone(50, 3000, 100)
  Reset(turnAngle)
EndWhile

'Reaching the finish point in the start area
While X < 0 Or Time.Get1() < 200
  SteerToPoint(@X + 50, yPos)
EndWhile

'Breaking motors and playing finish sound
MotorAB.OffAndBrake()
Speaker.Tone(100, 3000, 300)
Speaker.Wait()
Speaker.Tone(100, 3000, 300)
Speaker.Wait()
Speaker.Tone(100, 3000, 300)
Speaker.Wait()