import "Mods\Odometry"
import "Mods\Gyro"
import "Mods\AdvEncoder"
import "Mods\AdvGyro"
import "Mods\ColorRGB"
import "Mods\SteerControl"
import "Mods\Pixy2"
import "Mods\Tool"

LCD.Clear()
Odometry.Config(15,43)
AdvEncoder.Config()
AdvGyro.ResetPort2(0)
ColorRGB.Config(10, 250, 10, 250, 10, 250)
SteerControl.Config(0.5, 0, 0, 35, 0)

Sensor.SetMode(2, 0)
Sensor.SetMode(3, 4)

dot_x = Row.Init(4, 1)
Row.Write(dot_x, 0, 0)
Row.Write(dot_x, 1, 0)
Row.Write(dot_x, 2, 0)
Row.Write(dot_x, 3, 0)

dot_y = Row.Init(4, 1)
Row.Write(dot_y, 0, -60)
Row.Write(dot_y, 1, -40)
Row.Write(dot_y, 2, 20)
Row.Write(dot_y, 3, 40)

m1 = Thread.CreateMutex()
Gyrokp = 2
Gyrokd = 1.5
GyroOld = 0
clockwise = 0
turncounter = 0
turn_degree = 90

Sub UArt
  AdvGyro.WritePort2(gyroAngle)
  AdvEncoder.getChangeA(encChangeA)
  AdvEncoder.getChangeC(encChangeC)
  ColorRGB.ReadPort3(r, g, b)
EndSub

Sub Steering
  SteerControl.Core(encChangeC, powerC)
  MotorC.StartPower(powerC)
EndSub

Sub Odometry
  While 1=1
    Odometry.Write(gyroAngle, encChangeA)
    Odometry.Read(X, Y)
  EndWhile
EndSub

Function ColorCheck(out number isWhite, out number isOrange)
  If b < 70 Then
    isWhite = 1
  Else
    isWhite = 0
  EndIf
  If r > 80 Then
    isOrange = 1
  Else
    isOrange = 0
  Endif
EndFunction

Function SteerToPoint(in number x, in number y)
  Tool.atan2(x - X, y - Y, atan)
  SteerControl.SetTarget(AdvGyro.Read() - atan)
EndFunction

Function DriveToPoint(in number x, in number y)
  While X < x - 5 Or Y < y - 5 Or Y > y + 5
    SteerToPoint(x, y)
  EndWhile
EndFunction

Function DriveToPointUntilLine(in number x, in number y)
  ColorCheck(isWhite, isOrange)
  If IsWhite and clockwise != IsOrange
EndFunction

Function Reset(in number angle)
  Odometry.Read(x1, y1)
  
EndFunction

Function turnreset(in number turn_degree)
  If chas=1 Then
    AdvGyro.ResetPort2(turn_degree + AdvGyro.Read())
  Else
    AdvGyro.ResetPort2(AdvGyro.Read() - turn_degree)
  EndIf
  turncounter=turncounter+1
  MotorA.ResetCount
EndFunction

Function STP (in number x_od, in number y_od, in number X, in number Y)
  Tool.atan2(x - x_od, y - y_od, atan)
  SteerControl.SetTarget(AdvGyro.Read - atan)
EndFunction

Function DTP()
  While i < 4
    While Row.Read(dot_x, i)-5 >= X_odom
      STP(X_odom, Y_odom, Row.Read(dot_x , i), Row.Read(dot_y , i))
    EndWhile
    i=i+1
  EndWhile
EndFunction



Function GyroCore(in number delta, out number aim)
  Gyrokp * delta + Gyrokd * (delta - GyroOld) = aim
  delta = GyroOld
EndFunction

Function qualstart()
  While IsWhite = 0
    GyroCore(AdvGyro.Read, SteerControl.SetTarget)
  EndWhile
  chas = isOrange
  resetodometry(od_x, od_y)
  Odometry.Reset(od_x, od_y)
  turnreset(90)
EndFunction

Sub WriteOdometry
  While 1=1
    Odometry.Write(AdvGyro.Read(),AdvEncoder.getChangeA())
  EndWhile
EndSub

Sub Main
  While turncounter < 11
    DTP()
    While 1=1
      GyroCore(AdvGyro.Read,SteerControl.SetTarget)
      If IsWhite = 0 And Chas = isOrange Then
        break
      EndIf
    EndWhile
    MotorA.ResetCount()
    turnreset(90)
  EndWhile
EndSub

Sub Core
  While 1=1
    SteerControl.Core(AdvEncoder.getChangeC,MotorC.StartPower)
    If X > 50 Then
      colorupdate()
    EndIf
  EndWhile
EndSub

Thread.Run = WriteOdometry
Thread.Run = Main
Thread.Run = Core
