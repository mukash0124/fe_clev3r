DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VPR_ADVGYRO_GYRO_LAST
DATAF VPR_ADVGYRO_GYRO_ANGLE
DATAF VLV_ANGLE_1
DATAF VLV_ANGLE_2
DATAF VLV_ANGLE_3
DATAF VLV_WRAPPED_ANGLE_3
DATAF VGV_ANGLE
DATAF VGV_WRAPPED_ANGLE
DATAF VGV_ENC
DATAF VLV_VALUE_1
DATAF VLV_VALUE_2
DATAF VLV_UNWRAPPED_ANGLE_2
DATAF VLV_A_3

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VPR_ADVGYRO_GYRO_LAST
    MOVEF_F 0.0 VPR_ADVGYRO_GYRO_ANGLE
    MOVEF_F 0.0 VLV_ANGLE_1
    MOVEF_F 0.0 VLV_ANGLE_2
    MOVEF_F 0.0 VLV_ANGLE_3
    MOVEF_F 0.0 VLV_WRAPPED_ANGLE_3
    MOVEF_F 0.0 VGV_ANGLE
    MOVEF_F 0.0 VGV_WRAPPED_ANGLE
    MOVEF_F 0.0 VGV_ENC
    MOVEF_F 0.0 VLV_VALUE_1
    MOVEF_F 0.0 VLV_VALUE_2
    MOVEF_F 0.0 VLV_UNWRAPPED_ANGLE_2
    MOVEF_F 0.0 VLV_A_3
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VPR_ADVGYRO_GYRO_LAST
    MOVEF_F 0.0 VPR_ADVGYRO_GYRO_ANGLE
    MOVEF_F 0.0 VLV_ANGLE_1
    MOVEF_F 0.0 VLV_ANGLE_2
    MOVEF_F 0.0 VLV_ANGLE_3
    MOVEF_F 0.0 VLV_WRAPPED_ANGLE_3
    MOVEF_F 0.0 VGV_ANGLE
    MOVEF_F 0.0 VGV_WRAPPED_ANGLE
    MOVEF_F 0.0 VLV_ANGLE_2
    MOVEF_F 0.0 VGV_ENC
    DATA8 layer0
	DATA8 no0
	DATA8 mode80
	
	MOVEF_8 2.0 no0
	SUB8 no0 1 no0
	DIV8 no0 4 layer0
	MATH MOD8 no0 4 no0

	MOVEF_8 0.0 mode80
	
	INPUT_DEVICE READY_RAW layer0 no0 0 mode80 0
    MOVEF_F 0.0 VLV_ANGLE_1
    WRITE32 ENDSUB_M_ADVGYRO_RESETPORT2_1:CALLSUB1 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_ADVGYRO_RESETPORT2_1
CALLSUB1:
    CALL LCD.CLEAR
  while3:
    JR_NEQF 1.0 1.0 endwhile3
  whilebody3:
    WRITE32 ENDSUB_M_ADVGYRO_WRITEPORT2_1:CALLSUB4 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_ADVGYRO_WRITEPORT2_1
CALLSUB4:
    MOVEF_F VLV_ANGLE_2 VGV_ANGLE
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA VGV_ENC
    MOVEF_F 100.0 VLV_ANGLE_3
    WRITE32 ENDSUB_M_TOOLBOX_ANGLEWRAP_2:CALLSUB6 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_TOOLBOX_ANGLEWRAP_2
CALLSUB6:
    MOVEF_F VLV_WRAPPED_ANGLE_3 VGV_WRAPPED_ANGLE
    STRINGS VALUE_FORMATTED VGV_ANGLE '%g' 99 S.0
    CALL LCD.TEXT 1.0 10.0 10.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_ENC '%g' 99 S.0
    CALL LCD.TEXT 1.0 10.0 50.0 2.0 S.0
    DATA32 milliseconds11
	MOVEF_32 500.0 milliseconds11
	DATA32 timer11
	TIMER_WAIT milliseconds11 timer11
	TIMER_READY timer11
    CALL LCD.CLEAR
    JR_EQF 1.0 1.0 whilebody3
  endwhile3:
ENDTHREAD:
    RETURN
SUB_M_ADVGYRO_RESETPORT2_1:
    INPUT_READEXT 0 1 0 -1 18 1 s2out1
	MOVE32_F s2out1 VLV_VALUE_1
    SUBF VLV_VALUE_1 VLV_ANGLE_1 VPR_ADVGYRO_GYRO_LAST
RETSUB_M_ADVGYRO_RESETPORT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_ADVGYRO_RESETPORT2_1:
SUB_M_ADVGYRO_WRITEPORT2_1:
    INPUT_READEXT 0 1 0 -1 18 1 s2out1
	MOVE32_F s2out1 VLV_VALUE_2
    SUBF VLV_VALUE_2 VPR_ADVGYRO_GYRO_LAST VLV_UNWRAPPED_ANGLE_2
    MOVEF_F VLV_UNWRAPPED_ANGLE_2 VLV_ANGLE_3
    WRITE32 ENDSUB_M_TOOLBOX_ANGLEWRAP_2:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_TOOLBOX_ANGLEWRAP_2
CALLSUB17:
    MOVEF_F VLV_WRAPPED_ANGLE_3 VLV_ANGLE_2
    MOVEF_F VLV_ANGLE_2 VPR_ADVGYRO_GYRO_ANGLE
RETSUB_M_ADVGYRO_WRITEPORT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_ADVGYRO_WRITEPORT2_1:
SUB_M_TOOLBOX_ANGLEWRAP_2:
    JR_GTEQF VLV_ANGLE_3 0.0 else18_1
    MOVEF_F -180.0 VLV_A_3
    JR endif18
  else18_1:
    MOVEF_F 180.0 VLV_A_3
  else18_2:
  endif18:
    ADDF VLV_ANGLE_3 VLV_A_3 F.1
    MATH MOD F.1 360.0 F.0
    SUBF F.0 VLV_A_3 VLV_WRAPPED_ANGLE_3
RETSUB_M_TOOLBOX_ANGLEWRAP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_TOOLBOX_ANGLEWRAP_2:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
