DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_PORT_1
DATAF VLV_X_1
DATAF VLV_Y_1
DATAF VLV_SIGNATURE_1
DATAF VGV_X
DATAF VGV_Y
DATAF VGV_SIGNATURE
DATAF VGV_XLOGS
DATAF VGV_YLOGS
ARRAY16 VLV_VALUES_1 2
DATAF VLV_SIG1_1
DATAF VLV_SIG2_1

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_PORT_1
    MOVEF_F 0.0 VLV_X_1
    MOVEF_F 0.0 VLV_Y_1
    MOVEF_F 0.0 VLV_SIGNATURE_1
    MOVEF_F 0.0 VGV_X
    MOVEF_F 0.0 VGV_Y
    MOVEF_F 0.0 VGV_SIGNATURE
    MOVEF_F 0.0 VGV_XLOGS
    MOVEF_F 0.0 VGV_YLOGS
    CALL ARRAYCREATE_FLOAT VLV_VALUES_1
    MOVEF_F 0.0 VLV_SIG1_1
    MOVEF_F 0.0 VLV_SIG2_1
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VLV_PORT_1
    MOVEF_F 0.0 VLV_X_1
    MOVEF_F 0.0 VLV_Y_1
    MOVEF_F 0.0 VLV_SIGNATURE_1
    MOVEF_F 0.0 VGV_X
    MOVEF_F 0.0 VGV_Y
    MOVEF_F 0.0 VGV_SIGNATURE
    MOVEF_F 0.0 VGV_XLOGS
    MOVEF_F 0.0 VGV_YLOGS
    CALL LCD.CLEAR
    CALL EV3FILE.OPENWRITE 'xlogs' VGV_XLOGS
    CALL EV3FILE.OPENWRITE 'ylogs' VGV_YLOGS
  while3:
    JR_NEQF 1.0 1.0 endwhile3
  whilebody3:
    CALL SPEAKER.TONE 100.0 2000.0 50.0
    MOVEF_F 1.0 VLV_PORT_1
    WRITE32 ENDSUB_M_ADVPIXY_GETLARGEST_4:CALLSUB5 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_M_ADVPIXY_GETLARGEST_4
CALLSUB5:
    MOVEF_F VLV_X_1 VGV_X
    MOVEF_F VLV_Y_1 VGV_Y
    MOVEF_F VLV_SIGNATURE_1 VGV_SIGNATURE
    STRINGS VALUE_FORMATTED VGV_X '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_XLOGS S.0
    STRINGS VALUE_FORMATTED VGV_Y '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_YLOGS S.0
    JR_EQF 1.0 1.0 whilebody3
  endwhile3:
ENDTHREAD:
    RETURN
SUB_M_ADVPIXY_GETLARGEST_4:
    CALL SENSOR.READI2CREGISTERS VLV_PORT_1 1.0 80.0 6.0 VLV_VALUES_1
    CALL ARRAYGET_FLOAT 0.0 VLV_SIG1_1 VLV_VALUES_1
    CALL ARRAYGET_FLOAT 1.0 VLV_SIG2_1 VLV_VALUES_1
    MULF VLV_SIG2_1 256.0 F.1
    ADDF VLV_SIG1_1 F.1 F.0
    MULF VLV_SIG2_1 256.0 F.5
    ADDF VLV_SIG1_1 F.5 F.4
    DATAF tmpf17
    DATA8 flag17
    DIVF F.4 8.0 tmpf17
    CP_EQF 0.0 8.0 flag17
    SELECTF flag17 0.0 tmpf17 F.3

    MATH FLOOR F.3 F.2
    MULF 8.0 F.2 F.1
    SUBF F.0 F.1 VLV_SIGNATURE_1
    CALL ARRAYGET_FLOAT 2.0 F.0 VLV_VALUES_1
    SUBF F.0 128.0 VLV_X_1
    CALL ARRAYGET_FLOAT 3.0 VLV_Y_1 VLV_VALUES_1
RETSUB_M_ADVPIXY_GETLARGEST_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_M_ADVPIXY_GETLARGEST_4:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall SENSOR.READI2CREGISTERS     // FFFFA
{
	IN_F port
	IN_F address
	IN_F registernumber
	IN_F readbytes
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 rd
	ARRAY8 outdata 2
	ARRAY8 indata 32
	DATA8 tmp8

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_32 readbytes rd
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	MOVEF_8 address tmp8
	WRITE8 tmp8 0 outdata
	MOVEF_8 registernumber tmp8
	WRITE8 tmp8 1 outdata

	// do the communciation
	MOVE32_8 rd tmp8
	INPUT_DEVICE SETUP layer no 1 0 2 outdata tmp8 indata 

	// decode response
	DATA32 i
	DATAF v
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 tmp8
	READ8 indata tmp8 tmp8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE tmp8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
