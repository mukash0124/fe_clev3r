import "Mods\Odometry"
import "Mods\Gyro"
import "Mods\AdvEncoder"
import "Mods\AdvGyro"
import "Mods\ColorRGB"
import "Mods\SteerControl"
import "Mods\Pixy2"
import "Mods\Tool"

Sensor.SetMode(2, 0)
Sensor.SetMode(3, 4)

Odometry.Config(15.43)
AdvGyro.ResetPort2(0)
ColorRGB.Config(10, 250, 10, 250, 10, 250)
SteerControl.Config(0.5, 0, 0, 35, 0)

x_dot = Row.Init(4, 1)
Row.write(x_dot, 0, 0)
Row.write(x_dot, 1, 0)
Row.write(x_dot, 2, 0)
Row.write(x_dot, 3, 0)

y_dot = Row.Init(4, 1)
Row.write(y_dot, 0, -60)
Row.write(y_dot, 1, -40)
Row.write(y_dot, 2, 20)
Row.write(y_dot, 3, 40)

gyroKp = 2
gyroKd = 1.5
gyroOld = 0
clockWise = 0
turnCounter = 0
turnDegree = 90
fakeWheelBase = 14.5
gyroAngle = 0

col = EV3File.OpenRead("col")
Rmin = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Rmax = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Gmin = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Gmax = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Bmin = EV3File.ConvertToNumber(EV3File.ReadLine(col))
Bmax = EV3File.ConvertToNumber(EV3File.ReadLine(col))
ColorRGB.Config(Rmin, Rmax, Gmin, Gmax, Bmin, Bmax)

MotorC.StartPower(-80)
Program.Delay(2000)
MotorC.ResetCount()
Motor.Move("C", 50, 76, "True")

Sub UArt
  While 1=1
    AdvGyro.WritePort2(gyroAngle)
    AdvEncoder.getChangeA(encChangeA)
    AdvEncoder.getChangeC(encChangeC)
    ColorRGB.ReadPort3(r, g, b)
  EndWhile
EndSub

Sub I2C
  While 1=1
    Pixy2.getSignature(1, 1, x_pixy, y_pixy, w_pixy, h_pixy)
  EndWhile
EndSub

Sub Steering
  While 1=1
    SteerControl.Core(encChangeC, powerC)
    MotorC.StartPower(powerC)
    SteerControl.SetTarget(aim)
  EndWhile
EndSub

Sub Odometry
  While 1=1
    Odometry.Write(gyroAngle, encChangeA)
    Odometry.Read(X, Y)
  EndWhile
EndSub

Function ColorCheck(out number isWhite, out number isOrange)
  If b < 25 Then
    isWhite = 0
  Else
    isWhite = 1
  EndIf
  If r > 50 Then
    isOrange = 1
  Else
    isOrange = 0
  EndIf
EndFunction

Function SteerToPoint(in number x, in number y)
  deltaX = x - X
  deltaY = y - Y
  Tool.atan2(deltaX, deltaY, heading)
  headingDifference = gyroAngle - heading
  SteerControl.SetTarget(headingDifference)
EndFunction

Function DriveToPointUntilLine(in number x, in number y)
  isWhite = 1
  isOrange = clockWise
  While isWhite = 1 Or isOrange = clockWise
    SteerToPoint(x, y)
    ColorCheck(isWhite, isOrange)
  EndWhile
EndFunction

Function DriveToPoint(in number x, in number y)
  While X <= x - 5 Or Y <= y - 5 Or Y >= y - 5
    SteerToPoint(x, y)
    If X >= x - 5 And Y >= y - 5 And Y <= y - 5 Then
      break
    EndIf
  EndWhile
EndFunction

Function Reset(in number turnAngle)
  x1 = X + Math.Cos(Math.GetRadians(gyroAngle)) * fakeWheelBase
  y1 = Y + Math.Sin(Math.GetRadians(gyroAngle)) * fakeWheelBase
  DriveToPointUntilLine(100, 50)
  x2 = X + Math.Cos(Math.GetRadians(gyroAngle)) * fakeWheelBase
  y2 = Y + Math.Sin(Math.GetRadians(gyroAngle)) * fakeWheelBase
  If clockWise = 0 Then
    AdvGyro.ResetPort2(gyroAngle + turnAngle)
  Else
    AdvGyro.ResetPort2(gyroAngle - turnAngle)
  EndIf
  AdvGyro.WritePort2(gyroAngle)
  deltaX = y2 - y1
  deltaY = x1 - x2
  resetX = 0.88 * deltaY - 0.51 * deltaX - 47.13
  resetY = 1.72 * resetX + 133.97
  resetX = X - 12.3 * Math.Cos(Math.GetRadians(gyroAngle)) * fakeWheelBase
  resetY = Y - 12.3 * Math.Sin(Math.GetRadians(gyroAngle)) * fakeWheelBase
  Odometry.Reset(resetX, resetY)
  turnCounter++
EndFunction

Function DriveToPoints()
  For i = 0 To 3
    DriveToPoint(Row.Read(x_dot, i), Row.Read(y_dot, i))
  EndFor
EndFunction

Function GyroCore(out number aim)
  aim = gyroKp * delta + gyroKd * (gyroAngle - gyroOld)
  gyroOld = gyroAngle
EndFunction

Function Start(in number power)
  isWhite = 0
  MotorAB.StartPower(power)
  While isWhite = 0
    GyroCore(aim)
    SteerControl.SetTarget(aim)
    ColorCheck(isWhite, clockWise)
  EndWhile
  Reset(90)
EndFunction

Thread.Run = UArt
'Thread.Run = I2C
Thread.Run = Odometry
Thread.run = Steering

Start(50)
While turnCounter < 12
  DriveToPoints()
  isWhite = 0
  isOrange = 0
  While isWhite = 0 Or isOrange != clockWise
    GyroCore(aim)
    SteerControl.SetTarget(aim)
    ColorCheck(isWhite, clockWise)
  EndWhile
  Reset(90)
EndWhile